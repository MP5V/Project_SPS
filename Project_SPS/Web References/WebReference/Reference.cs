//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Этот исходный текст был создан автоматически: Microsoft.VSDesigner, версия: 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Project_SPS.WebReference {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OBMENSoapBinding", Namespace="WWW.OBMEN.RU")]
    public partial class OBMEN : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UniversalOperationCompleted;
        
        private System.Threading.SendOrPostCallback Document_TechOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OBMEN() {
            this.Url = global::Project_SPS.Properties.Settings.Default.Project_SPS_WebReference_OBMEN;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UniversalCompletedEventHandler UniversalCompleted;
        
        /// <remarks/>
        public event Document_TechCompletedEventHandler Document_TechCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.OBMEN.RU#OBMEN:Universal", RequestNamespace="WWW.OBMEN.RU", ResponseNamespace="WWW.OBMEN.RU", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public int Universal(ref string Param1, string Param2, string Param3, string Param4, string Param5) {
            object[] results = this.Invoke("Universal", new object[] {
                        Param1,
                        Param2,
                        Param3,
                        Param4,
                        Param5});
            Param1 = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UniversalAsync(string Param1, string Param2, string Param3, string Param4, string Param5) {
            this.UniversalAsync(Param1, Param2, Param3, Param4, Param5, null);
        }
        
        /// <remarks/>
        public void UniversalAsync(string Param1, string Param2, string Param3, string Param4, string Param5, object userState) {
            if ((this.UniversalOperationCompleted == null)) {
                this.UniversalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUniversalOperationCompleted);
            }
            this.InvokeAsync("Universal", new object[] {
                        Param1,
                        Param2,
                        Param3,
                        Param4,
                        Param5}, this.UniversalOperationCompleted, userState);
        }
        
        private void OnUniversalOperationCompleted(object arg) {
            if ((this.UniversalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UniversalCompleted(this, new UniversalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WWW.OBMEN.RU#OBMEN:Document_Tech", RequestNamespace="WWW.OBMEN.RU", ResponseNamespace="WWW.OBMEN.RU", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public int Document_Tech(ref string Parametr1, string Parametr2, string Parametr3, string Parametr4, string Parametr5) {
            object[] results = this.Invoke("Document_Tech", new object[] {
                        Parametr1,
                        Parametr2,
                        Parametr3,
                        Parametr4,
                        Parametr5});
            Parametr1 = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void Document_TechAsync(string Parametr1, string Parametr2, string Parametr3, string Parametr4, string Parametr5) {
            this.Document_TechAsync(Parametr1, Parametr2, Parametr3, Parametr4, Parametr5, null);
        }
        
        /// <remarks/>
        public void Document_TechAsync(string Parametr1, string Parametr2, string Parametr3, string Parametr4, string Parametr5, object userState) {
            if ((this.Document_TechOperationCompleted == null)) {
                this.Document_TechOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocument_TechOperationCompleted);
            }
            this.InvokeAsync("Document_Tech", new object[] {
                        Parametr1,
                        Parametr2,
                        Parametr3,
                        Parametr4,
                        Parametr5}, this.Document_TechOperationCompleted, userState);
        }
        
        private void OnDocument_TechOperationCompleted(object arg) {
            if ((this.Document_TechCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Document_TechCompleted(this, new Document_TechCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UniversalCompletedEventHandler(object sender, UniversalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UniversalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UniversalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Param1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void Document_TechCompletedEventHandler(object sender, Document_TechCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Document_TechCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Document_TechCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Parametr1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591